//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch

import UIKit

class GridiconsGenerated: NSObject {
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawGridiconsadd(frame frame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .AspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 20, height: resizedFrame.height / 20)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        CGContextTranslateCTM(context, -20, -84)
        
        /// gridicons-add
        let gridiconsadd = UIBezierPath()
        gridiconsadd.moveToPoint(CGPoint(x: 10, y: 4))
        gridiconsadd.addCurveToPoint(CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 4.48, y: 4), controlPoint2: CGPoint(x: 0, y: 8.48))
        gridiconsadd.addCurveToPoint(CGPoint(x: 10, y: 24), controlPoint1: CGPoint(x: 0, y: 19.52), controlPoint2: CGPoint(x: 4.48, y: 24))
        gridiconsadd.addCurveToPoint(CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 15.52, y: 24), controlPoint2: CGPoint(x: 20, y: 19.52))
        gridiconsadd.addCurveToPoint(CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 20, y: 8.48), controlPoint2: CGPoint(x: 15.52, y: 4))
        gridiconsadd.addLineToPoint(CGPoint(x: 10, y: 4))
        gridiconsadd.closePath()
        gridiconsadd.moveToPoint(CGPoint(x: 15, y: 15))
        gridiconsadd.addLineToPoint(CGPoint(x: 11, y: 15))
        gridiconsadd.addLineToPoint(CGPoint(x: 11, y: 19))
        gridiconsadd.addLineToPoint(CGPoint(x: 9, y: 19))
        gridiconsadd.addLineToPoint(CGPoint(x: 9, y: 15))
        gridiconsadd.addLineToPoint(CGPoint(x: 5, y: 15))
        gridiconsadd.addLineToPoint(CGPoint(x: 5, y: 13))
        gridiconsadd.addLineToPoint(CGPoint(x: 9, y: 13))
        gridiconsadd.addLineToPoint(CGPoint(x: 9, y: 9))
        gridiconsadd.addLineToPoint(CGPoint(x: 11, y: 9))
        gridiconsadd.addLineToPoint(CGPoint(x: 11, y: 13))
        gridiconsadd.addLineToPoint(CGPoint(x: 15, y: 13))
        gridiconsadd.addLineToPoint(CGPoint(x: 15, y: 15))
        gridiconsadd.closePath()
        gridiconsadd.moveToPoint(CGPoint(x: 15, y: 15))
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 20, 80)
        gridiconsadd.usesEvenOddFillRule = true
        UIColor.blackColor().setFill()
        gridiconsadd.fill()
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
    }
    
    class func drawGridiconsaddoutline(frame frame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .AspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 20, height: resizedFrame.height / 20)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        CGContextTranslateCTM(context, 32, -84)
        
        /// gridicons-add-outline
        let gridiconsaddoutline = UIBezierPath()
        gridiconsaddoutline.moveToPoint(CGPoint(x: 10, y: 6))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 18, y: 14), controlPoint1: CGPoint(x: 14.41, y: 6), controlPoint2: CGPoint(x: 18, y: 9.59))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 10, y: 22), controlPoint1: CGPoint(x: 18, y: 18.41), controlPoint2: CGPoint(x: 14.41, y: 22))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 2, y: 14), controlPoint1: CGPoint(x: 5.59, y: 22), controlPoint2: CGPoint(x: 2, y: 18.41))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 10, y: 6), controlPoint1: CGPoint(x: 2, y: 9.59), controlPoint2: CGPoint(x: 5.59, y: 6))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 10, y: 6))
        gridiconsaddoutline.closePath()
        gridiconsaddoutline.moveToPoint(CGPoint(x: 10, y: 4))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 4.48, y: 4), controlPoint2: CGPoint(x: 0, y: 8.48))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 10, y: 24), controlPoint1: CGPoint(x: 0, y: 19.52), controlPoint2: CGPoint(x: 4.48, y: 24))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 15.52, y: 24), controlPoint2: CGPoint(x: 20, y: 19.52))
        gridiconsaddoutline.addCurveToPoint(CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 20, y: 8.48), controlPoint2: CGPoint(x: 15.52, y: 4))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 10, y: 4))
        gridiconsaddoutline.closePath()
        gridiconsaddoutline.moveToPoint(CGPoint(x: 15, y: 13))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 11, y: 13))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 11, y: 9))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 9, y: 9))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 9, y: 13))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 5, y: 13))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 5, y: 15))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 9, y: 15))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 9, y: 19))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 11, y: 19))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 11, y: 15))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 15, y: 15))
        gridiconsaddoutline.addLineToPoint(CGPoint(x: 15, y: 13))
        gridiconsaddoutline.closePath()
        gridiconsaddoutline.moveToPoint(CGPoint(x: 15, y: 13))
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -32, 80)
        gridiconsaddoutline.usesEvenOddFillRule = true
        UIColor.blackColor().setFill()
        gridiconsaddoutline.fill()
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
    }
    
    class func drawGridiconsaddimage(frame frame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .AspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 19, height: resizedFrame.height / 19)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        CGContextTranslateCTM(context, -72, -85)
        
        /// gridicons-add-image
        let gridiconsaddimage = UIBezierPath()
        gridiconsaddimage.moveToPoint(CGPoint(x: 19, y: 8))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 19, y: 10))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 16, y: 10))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 16, y: 13))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 13))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 10))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 11, y: 10))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 11, y: 8))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 8))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 5))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 16, y: 5))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 16, y: 8))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 19, y: 8))
        gridiconsaddimage.closePath()
        gridiconsaddimage.moveToPoint(CGPoint(x: 10.5, y: 15))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 12, y: 13.5), controlPoint1: CGPoint(x: 11.33, y: 15), controlPoint2: CGPoint(x: 12, y: 14.33))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 10.5, y: 12), controlPoint1: CGPoint(x: 12, y: 12.67), controlPoint2: CGPoint(x: 11.33, y: 12))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 9, y: 13.5), controlPoint1: CGPoint(x: 9.67, y: 12), controlPoint2: CGPoint(x: 9, y: 12.67))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 10.5, y: 15), controlPoint1: CGPoint(x: 9, y: 14.33), controlPoint2: CGPoint(x: 9.67, y: 15))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 10.5, y: 15))
        gridiconsaddimage.closePath()
        gridiconsaddimage.moveToPoint(CGPoint(x: 14, y: 18.23))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 13.49, y: 17.66))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 10.51, y: 17.66), controlPoint1: CGPoint(x: 12.7, y: 16.78), controlPoint2: CGPoint(x: 11.31, y: 16.78))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 9.86, y: 18.4))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 5, y: 13))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 2, y: 16.33))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 2, y: 10))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 9, y: 10))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 9, y: 8))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 2, y: 8))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 0.9, y: 8), controlPoint2: CGPoint(x: 0, y: 8.89))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 0, y: 22))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 2, y: 24), controlPoint1: CGPoint(x: 0, y: 23.11), controlPoint2: CGPoint(x: 0.9, y: 24))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 24))
        gridiconsaddimage.addCurveToPoint(CGPoint(x: 16, y: 22), controlPoint1: CGPoint(x: 15.11, y: 24), controlPoint2: CGPoint(x: 16, y: 23.11))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 16, y: 15))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 15))
        gridiconsaddimage.addLineToPoint(CGPoint(x: 14, y: 18.23))
        gridiconsaddimage.closePath()
        gridiconsaddimage.moveToPoint(CGPoint(x: 14, y: 18.23))
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 72, 80)
        gridiconsaddimage.usesEvenOddFillRule = true
        UIColor.blackColor().setFill()
        gridiconsaddimage.fill()
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfGridiconsadd(size size: CGSize = CGSize(width: 20, height: 20), resizing: ResizingBehavior = .AspectFit) -> UIImage {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        Gridicons.drawGridiconsadd(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaddoutline(size size: CGSize = CGSize(width: 20, height: 20), resizing: ResizingBehavior = .AspectFit) -> UIImage {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        Gridicons.drawGridiconsaddoutline(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    class func imageOfGridiconsaddimage(size size: CGSize = CGSize(width: 19, height: 19), resizing: ResizingBehavior = .AspectFit) -> UIImage {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        Gridicons.drawGridiconsaddimage(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case AspectFit /// The content is proportionally resized to fit into the target rectangle.
        case AspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case Stretch /// The content is stretched to match the entire target rectangle.
        case Center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .AspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .AspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .Stretch:
                    break
                case .Center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
